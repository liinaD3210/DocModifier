import streamlit as st
from docx import Document
from io import BytesIO
import os
import json # –û—Å—Ç–∞–≤–ª—è–µ–º, —Ç–∞–∫ –∫–∞–∫ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ get_diff_for_instruction –∏–ª–∏ format_instruction_for_display
import html
# import textwrap # –ü–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ –≤–∏–∂—É –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã

try:
    from core.llm_handler import build_graph, GraphState # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ llm_handler —Å–æ–¥–µ—Ä–∂–∏—Ç build_graph
    from core.docx_modifier import extract_text_from_doc, modify_document_with_structured_instructions
    # find_paragraphs_with_text –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –≤ —ç—Ç–æ–º app.py, —É–±—Ä–∞–ª –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω
except ImportError as e:
    st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã 'core' –Ω–∞ –º–µ—Å—Ç–µ –∏ –∏–º–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.")
    st.stop()

EXAMPLE_DOC_PATH = "example_document.docx" # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ê–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ DOCX",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞ ---
@st.cache_resource
def get_graph_instance(): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    try:
        graph = build_graph() # build_graph –∏–∑ –≤–∞—à–µ–≥–æ llm_handler.py (–∏–ª–∏ llm_graph_builder.py)
        return graph
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LangGraph: {e}")
        return None

if 'app_graph' not in st.session_state:
    st.session_state.app_graph = get_graph_instance()

# NEW_FEATURE_START: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–∞
def load_example_document():
    if os.path.exists(EXAMPLE_DOC_PATH):
        with open(EXAMPLE_DOC_PATH, "rb") as f:
            return f.read(), os.path.basename(EXAMPLE_DOC_PATH)
    else:
        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ, –µ—Å–ª–∏ –ø—Ä–∏–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        st.toast(f"–§–∞–π–ª –ø—Ä–∏–º–µ—Ä–∞ '{EXAMPLE_DOC_PATH}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–∏–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", icon="‚ö†Ô∏è")
        return None, None
# NEW_FEATURE_END

def init_session_state(clear_all=False, load_example_on_first_ever_run=False): # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    graph_instance = st.session_state.get('app_graph')

    if clear_all:
        keys_to_preserve = {'app_graph'} # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ
        preserved_values = {k: st.session_state[k] for k in keys_to_preserve if k in st.session_state}
        
        for key in list(st.session_state.keys()): # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
            del st.session_state[key]
        
        for k, v in preserved_values.items(): # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ (–≥—Ä–∞—Ñ)
            st.session_state[k] = v

    defaults = {
        "chat_messages": [], "current_doc_bytes": None, "original_file_name": None,
        "doc_loaded_flag": False, # –û–±—â–∏–π —Ñ–ª–∞–≥, —á—Ç–æ –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–ª–∏ –ø—Ä–∏–º–µ—Ä) –∑–∞–≥—Ä—É–∂–µ–Ω
        "is_example_active": False, # –§–ª–∞–≥, —á—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω –∏–º–µ–Ω–Ω–æ –ø—Ä–∏–º–µ—Ä
        "processing": False, "show_confirmation": False, 
        "proposed_instructions": None, "awaiting_clarification": False,
        "user_made_first_query_on_current_doc": False # –§–ª–∞–≥ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    }
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value
    
    # NEW_FEATURE_START: –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if load_example_on_first_ever_run and not st.session_state.doc_loaded_flag:
        example_bytes, example_name = load_example_document()
        if example_bytes:
            st.session_state.current_doc_bytes = example_bytes
            st.session_state.original_file_name = example_name
            st.session_state.doc_loaded_flag = True
            st.session_state.is_example_active = True
            st.session_state.user_made_first_query_on_current_doc = False # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤ —á–∞—Ç–µ
            st.session_state.chat_messages = [
                {"role": "assistant", 
                 "content": (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã –Ø –∑–∞–≥—Ä—É–∑–∏–ª –ø—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞: **'{example_name}'**.\n\n"
                             f"–ú–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é, –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å—Ä–∞–≤–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—É—é –∏ –∏–∑–º–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–º–µ—Ä–∞.\n\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                             f"* `–ó–∞–º–µ–Ω–∏ [–ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–µ–∫—Ç–∞] –Ω–∞ '–ü—Ä–æ–µ–∫—Ç –ê–≤—Ä–æ—Ä–∞'`\n"
                             f"* `–£–¥–∞–ª–∏ –∞–±–∑–∞—Ü, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '–≠—Ç–æ—Ç –∞–±–∑–∞—Ü –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.'`\n"
                             f"* `–°–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç '–í–∞–∂–Ω–æ–µ –∑–∞–º–µ—á–∞–Ω–∏–µ' –∂–∏—Ä–Ω—ã–º –∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–º`\n"
                             f"* `–í—ã—Ä–æ–≤–Ω—è–π –ø–æ —Ü–µ–Ω—Ç—Ä—É –∞–±–∑–∞—Ü –ó–∞ –Ω–µ–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ...`\n\n"
                             f"–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞. –£–¥–∞—á–∏!")}
            ]
            # st.toast –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ç.–∫. –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
    # NEW_FEATURE_END

# NEW_FEATURE_START: –£—Å–ª–æ–≤–∏–µ –¥–ª—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª—é–±–æ–≥–æ –∏–∑ –Ω–∞—à–∏—Ö –∫–ª—é—á–µ–π. –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–µ—Ç, —ç—Ç–æ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫.
# –ò–ª–∏ –µ—Å–ª–∏ 'chat_messages' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ st.experimental_rerun –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
if not any(key in st.session_state for key in ["chat_messages", "doc_loaded_flag"]):
    init_session_state(load_example_on_first_ever_run=True)
# NEW_FEATURE_END

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# –í–ê–®–ò –§–£–ù–ö–¶–ò–ò get_diff_for_instruction, show_confirmation_ui, 
# handle_user_prompt, handle_user_confirmation –û–°–¢–ê–Æ–¢–°–Ø –ó–î–ï–°–¨ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
# –Ø –∏—Ö —Å–∫–æ–ø–∏—Ä—É—é –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.

def get_diff_for_instruction(instruction: dict, doc: Document) -> dict:
    """
    –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –ì–æ—Ç–æ–≤–∏—Ç "–±—ã–ª–æ/—Å—Ç–∞–ª–æ" —Å HTML-–≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ —Ç—É—Å–∫–ª—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Å–ª–æ–≤.
    """
    result = {'before': '–û—à–∏–±–∫–∞', 'after': '–û—à–∏–±–∫–∞', 'notes': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∫—É.', 'found': False}
    
    if not doc:
        result['notes'] = '–û–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω.'
        return result

    try:
        op_type = instruction.get("operation_type")
        target = instruction.get("target_description", {})
        params = instruction.get("parameters", {})
        
        search_text = target.get("text_to_find")
        if not search_text:
            if op_type == "REPLACE_TEXT":
                search_text = params.get("old_text")
            elif op_type == "APPLY_FORMATTING":
                search_text = params.get("apply_to_text_segment")
        
        if not search_text:
            result['notes'] = 'LLM –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞.'
            return result

        # --- –ù–ê–ß–ê–õ–û –í–ê–®–ï–ô –õ–û–ì–ò–ö–ò get_diff_for_instruction ---
        full_text_str = "\n".join([p.text for p in doc.paragraphs]) # –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –ª—É—á—à–µ —á–µ—Ä–µ–∑ extract_text_from_doc
        all_words = full_text_str.split()
        search_words = search_text.split()
        target_word_start_index = -1
        for i in range(len(all_words) - len(search_words) + 1):
            if all_words[i:i+len(search_words)] == search_words:
                target_word_start_index = i
                break

        if target_word_start_index == -1:
            result['notes'] = f'–¢–µ–∫—Å—Ç ¬´{html.escape(search_text)}¬ª –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞.'
            return result
        
        target_word_end_index = target_word_start_index + len(search_words)
        context_words_count = 10 # –£–º–µ–Ω—å—à–∏–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –≤ UI
        start_idx = max(0, target_word_start_index - context_words_count)
        end_idx = min(len(all_words), target_word_end_index + context_words_count)
        
        words_before_context = all_words[start_idx:target_word_start_index]
        words_of_target = all_words[target_word_start_index:target_word_end_index]
        words_after_context = all_words[target_word_end_index:end_idx]
        
        style_context = "opacity: 0.6;"
        style_highlight_before = "background-color: #FFD2D2; color: #A62020; padding: 1px 3px; border-radius: 3px; font-weight: bold;"
        style_highlight_after = "background-color: #D2FFD2; color: #206620; padding: 1px 3px; border-radius: 3px; font-weight: bold;"
        style_highlight_format = "background-color: #D0E0FF; color: #103050; padding: 1px 3px; border-radius: 3px; font-style: italic;" # –î–æ–±–∞–≤–∏–ª –∫—É—Ä—Å–∏–≤ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
        
        escaped_context_before = html.escape(" ".join(words_before_context))
        escaped_target = html.escape(" ".join(words_of_target))
        escaped_context_after = html.escape(" ".join(words_after_context))

        result['before'] = (
            f"<span style='{style_context}'>...{escaped_context_before}</span> "
            f"<span style='{style_highlight_before}'>{escaped_target}</span> "
            f"<span style='{style_context}'>{escaped_context_after}...</span>"
        )
        
        notes = f"–û–ø–µ—Ä–∞—Ü–∏—è: `{op_type}`. "
        after_html = result['before'] # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø—Ä—è–º—É—é

        if op_type == "REPLACE_TEXT":
            old, new = params.get("old_text", search_text), params.get("new_text", "")
            escaped_new = html.escape(new)
            # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–µ–≤—É—é —á–∞—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ –±—ã–ª "–¥–æ"
            after_html = (
                f"<span style='{style_context}'>...{escaped_context_before}</span> "
                f"<span style='{style_highlight_after}'>{escaped_new}</span> " # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ
                f"<span style='{style_context}'>{escaped_context_after}...</span>"
            )
            notes += f"–ó–∞–º–µ–Ω–∞ ¬´{html.escape(old)}¬ª –Ω–∞ ¬´{html.escape(new)}¬ª."
        elif op_type == "INSERT_TEXT":
            to_insert = params.get("text_to_insert", "")
            position = params.get("position", "after_paragraph") # –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            escaped_insert = html.escape(to_insert)
            if "after" in position: # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                after_html = (
                    f"<span style='{style_context}'>...{escaped_context_before}</span> "
                    f"{escaped_target} <span style='{style_highlight_after}'>{escaped_insert}</span> "
                    f"<span style='{style_context}'>{escaped_context_after}...</span>"
                )
            elif "before" in position:
                 after_html = (
                    f"<span style='{style_context}'>...{escaped_context_before}</span> "
                    f"<span style='{style_highlight_after}'>{escaped_insert}</span> {escaped_target} "
                    f"<span style='{style_context}'>{escaped_context_after}...</span>"
                )
            else: # start_of_paragraph, end_of_paragraph - —Å–ª–æ–∂–Ω–µ–µ —Ç–æ—á–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –≤ —ç—Ç–æ–º diff
                after_html = f"{result['before']} <span style='{style_highlight_after}'>(–≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {escaped_insert})</span>"

            notes += f"–í—Å—Ç–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞: ¬´{escaped_insert}¬ª ({position})."
        elif op_type == "DELETE_ELEMENT":
            after_html = (
                 f"<span style='{style_context}'>...{escaped_context_before}</span> "
                 f"<span style='text-decoration: line-through; color: #FFAAAA; background-color: #502020;'>¬†(—É–¥–∞–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)¬†</span> "
                 f"<span style='{style_context}'>{escaped_context_after}...</span>"
            )
            notes += f"–£–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ ¬´{escaped_target}¬ª."
        elif op_type == "APPLY_FORMATTING":
            # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, "—Å—Ç–∞–ª–æ" –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ –∂–µ, –Ω–æ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º
            # –ú—ã –Ω–µ –º–æ–∂–µ–º –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –≤ HTML –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è XML –∏–ª–∏ —Å–ª–æ–∂–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞.
            # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–µ–º –¥–µ–π—Å—Ç–≤–∏–µ.
            rules_str_list = []
            for r_item in params.get("formatting_rules", []): # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ü–∏–∫–ª–∞
                rules_str_list.append(f"`{r_item.get('style')}`: `{r_item.get('value')}`")
            applied_formatting_desc = ", ".join(rules_str_list)
            
            after_html = ( # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                f"<span style='{style_context}'>...{escaped_context_before}</span> "
                f"<span style='{style_highlight_format}'>{escaped_target}</span> " # –¶–µ–ª–µ–≤–æ–π —Ç–µ–∫—Å—Ç –≤—ã–¥–µ–ª–µ–Ω
                f"<span style='{style_context}'>{escaped_context_after}...</span>"
            )
            notes += f"–ë—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫ ¬´{escaped_target}¬ª: {applied_formatting_desc}."
        
        result['after'] = after_html
        result['notes'] = notes
        result['found'] = True
        # --- –ö–û–ù–ï–¶ –í–ê–®–ï–ô –õ–û–ì–ò–ö–ò get_diff_for_instruction ---
    except Exception as e:
        result['notes'] = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}"
    return result

def show_confirmation_ui(instructions: list[dict]):
    if "selected_instructions" not in st.session_state:
        st.session_state.selected_instructions = {i: True for i in range(len(instructions))}

    st.subheader("ü§ñ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∫–∏")
    st.caption("–°–Ω–∏–º–∏—Ç–µ –≥–∞–ª–æ—á–∫–∏ —Å –ø—Ä–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å.")
    st.markdown("---")
    
    doc_object_for_diff = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    if st.session_state.current_doc_bytes:
        try:
            doc_object_for_diff = Document(BytesIO(st.session_state.current_doc_bytes))
        except Exception as e:
            st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ diff: {e}")
            doc_object_for_diff = None # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ None, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞

    container_style = "padding: 0.5rem; border: 1px solid #4A4A4A; border-radius: 0.3rem; margin-bottom: 0.5rem; background-color: #262730; color: #FAFAFA;"
    notes_style = "font-size: 0.9em; color: #A0A0A0;"


    for i, instruction in enumerate(instructions):
        with st.container(border=True): # –í–Ω–µ—à–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–∞–≤–∫–∏
            op_type = instruction.get("operation_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
            
            cols_header = st.columns([0.05, 0.95])
            with cols_header[0]:
                is_selected = st.checkbox(" ", value=st.session_state.selected_instructions.get(i, True), key=f"cb_diff_{i}", label_visibility="collapsed")
                st.session_state.selected_instructions[i] = is_selected
            with cols_header[1]:
                st.markdown(f"##### –ü—Ä–∞–≤–∫–∞ {i+1}: `{op_type}`")

            if doc_object_for_diff: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è diff
                diff = get_diff_for_instruction(instruction, doc_object_for_diff)
                
                if diff['found']:
                    st.markdown("**–ë—ã–ª–æ (–∫–æ–Ω—Ç–µ–∫—Å—Ç):**")
                    st.markdown(f"<div style='{container_style}'>{diff['before']}</div>", unsafe_allow_html=True)
                    
                    st.markdown("**–°—Ç–∞–Ω–µ—Ç (–∫–æ–Ω—Ç–µ–∫—Å—Ç):**")
                    st.markdown(f"<div style='{container_style}'>{diff['after']}</div>", unsafe_allow_html=True)
                else: # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è diff –Ω–µ –Ω–∞–π–¥–µ–Ω
                    st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:** {format_instruction_for_display(instruction)}")


                if diff['notes']:
                    st.markdown(f"<div style='{notes_style}'>‚ÑπÔ∏è {html.escape(diff['notes'])}</div>", unsafe_allow_html=True)
            else: # –ï—Å–ª–∏ doc_object_for_diff is None
                st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:** {format_instruction_for_display(instruction)}")
                st.caption("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç.")

        st.markdown("<br>", unsafe_allow_html=True) 

    st.markdown("---")
    apply_col, cancel_col, _ = st.columns([2, 1, 3])
    if apply_col.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏", use_container_width=True, key="apply_btn_confirmation"):
        handle_user_confirmation(approved=True)
    if cancel_col.button("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—Å–µ", use_container_width=True, key="cancel_btn_confirmation"):
        handle_user_confirmation(approved=False)

def handle_user_prompt(user_input: str):
    st.session_state.processing = True
    st.session_state.chat_messages.append({"role": "user", "content": user_input})
    try:
        if not st.session_state.current_doc_bytes:
            st.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞.")
            st.session_state.chat_messages.append({"role": "assistant", "content": "–û—à–∏–±–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."})
            st.session_state.processing = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            st.rerun() # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
            return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

        doc_content = extract_text_from_doc(Document(BytesIO(st.session_state.current_doc_bytes)))
        initial_state = GraphState(
            original_user_query=user_input, current_user_query=user_input,
            document_content_text=doc_content, document_bytes=st.session_state.current_doc_bytes,
            extracted_instructions=None, clarification_question=None, system_message=None, next_node_to_call=None
        )
        with st.spinner("ü§ñ –ê–≥–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
            if not st.session_state.app_graph: # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ì—Ä–∞—Ñ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                st.session_state.chat_messages.append({"role": "assistant", "content": "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É."})
                st.session_state.processing = False
                st.rerun()
                return

            final_state = st.session_state.app_graph.invoke(initial_state, {"recursion_limit": 15})

        st.session_state.awaiting_clarification = bool(final_state.get("clarification_question"))
        if final_state.get("extracted_instructions"):
            st.session_state.proposed_instructions = final_state["extracted_instructions"]
            st.session_state.show_confirmation = True
        elif final_state.get("clarification_question"):
            st.session_state.chat_messages.append({"role": "assistant", "content": final_state["clarification_question"]})
        elif final_state.get("system_message"):
            st.session_state.chat_messages.append({"role": "assistant", "content": final_state["system_message"]})
        else:
             st.session_state.chat_messages.append({"role": "assistant", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."})
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        st.session_state.chat_messages.append({"role": "assistant", "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"})
    finally:
        st.session_state.processing = False
        st.rerun()

def handle_user_confirmation(approved: bool):
    if not approved:
        st.session_state.chat_messages.append({"role": "assistant", "content": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã."})
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è selected_instructions –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        selected_instructions_map = st.session_state.get("selected_instructions", {})
        selected_indices = [i for i, sel in selected_instructions_map.items() if sel]
        
        instructions_to_apply = []
        if st.session_state.proposed_instructions: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            instructions_to_apply = [
                st.session_state.proposed_instructions[i] 
                for i in selected_indices 
                if i < len(st.session_state.proposed_instructions) # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
            ]

        if not instructions_to_apply:
            st.session_state.chat_messages.append({"role": "assistant", "content": "–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è. –î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã."})
        else:
            st.session_state.processing = True
            st.session_state.chat_messages.append({"role": "assistant", "content": f"–ü—Ä–∏–º–µ–Ω—è—é {len(instructions_to_apply)} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."})
            try:
                if not st.session_state.current_doc_bytes: # –ü—Ä–æ–≤–µ—Ä–∫–∞
                    st.error("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                    st.session_state.chat_messages.append({"role": "assistant", "content": "–û—à–∏–±–∫–∞: –î–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."})
                    return # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏

                doc = Document(BytesIO(st.session_state.current_doc_bytes))
                success = modify_document_with_structured_instructions(doc, instructions_to_apply)
                if success:
                    bio = BytesIO()
                    doc.save(bio)
                    st.session_state.current_doc_bytes = bio.getvalue()
                    st.session_state.chat_messages.append({"role": "assistant", "content": "–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã."})
                else:
                    st.session_state.chat_messages.append({"role": "assistant", "content": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–ª–∏ –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)."})
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
                st.session_state.chat_messages.append({"role": "assistant", "content": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"})
            finally:
                st.session_state.processing = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–¥–µ—Å—å
    
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ (approved –∏–ª–∏ not)
    st.session_state.show_confirmation = False
    st.session_state.proposed_instructions = None
    if "selected_instructions" in st.session_state: # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
        del st.session_state.selected_instructions
    
    # st.rerun() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ finally –≤ handle_user_prompt, –∏–ª–∏ –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    # –ï—Å–ª–∏ processing –±—ã–ª True, —Ç–æ rerun –∏–∑ handle_user_prompt –º–æ–∂–µ—Ç –Ω–µ —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞.
    # –õ—É—á—à–µ –∏–º–µ—Ç—å rerun –∑–¥–µ—Å—å, —á—Ç–æ–±—ã UI –æ–±–Ω–æ–≤–∏–ª—Å—è –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.
    if not st.session_state.processing: # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∏–¥–µ–º –≤ processing –≤ handle_user_prompt
        st.rerun()


def format_instruction_for_display(instruction: dict) -> str:
    op_type = instruction.get("operation_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
    params = instruction.get("parameters", {})
    target = instruction.get("target_description", {})
    
    display_parts = [f"**–î–µ–π—Å—Ç–≤–∏–µ:** `{op_type}`"]
    
    if op_type == "REPLACE_TEXT":
        old = params.get('old_text', 'N/A')
        new = params.get('new_text', 'N/A')
        context = target.get('text_to_find')
        display_parts.append(f"- –ó–∞–º–µ–Ω–∏—Ç—å: `{html.escape(old)}`")
        display_parts.append(f"- –ù–∞: `{html.escape(new)}`")
        if context: display_parts.append(f"- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: `{html.escape(context)}`")
    elif op_type == "INSERT_TEXT":
        text_ins = params.get('text_to_insert', 'N/A')
        pos = params.get('position', 'N/A')
        context = target.get('text_to_find')
        display_parts.append(f"- –í—Å—Ç–∞–≤–∏—Ç—å: `{html.escape(text_ins)}`")
        display_parts.append(f"- –ü–æ–∑–∏—Ü–∏—è: `{pos}`")
        if context: display_parts.append(f"- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ: `{html.escape(context)}`")
    elif op_type == "DELETE_ELEMENT":
        el_type = target.get('element_type', 'N/A')
        context = target.get('text_to_find')
        display_parts.append(f"- –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞: `{el_type}`")
        if context: display_parts.append(f"- –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ç–µ–∫—Å—Ç—É: `{html.escape(context)}`")
    elif op_type == "APPLY_FORMATTING":
        rules_display = [f"  - `{r.get('style')}`: `{r.get('value')}`" for r in params.get("formatting_rules", [])]
        context = target.get('text_to_find')
        segment = params.get('apply_to_text_segment')
        target_display = segment if segment else context
        if target_display:
            display_parts.append(f"- –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫: `{html.escape(target_display)}`")
        if rules_display: display_parts.extend(rules_display)
    else:
        if params: display_parts.append(f"- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ```json\n{json.dumps(params, indent=2, ensure_ascii=False)}\n```")
        if target: display_parts.append(f"- –¶–µ–ª—å: ```json\n{json.dumps(target, indent=2, ensure_ascii=False)}\n```")
    return "\n".join(display_parts)
# --- –ö–û–ù–ï–¶ –í–ê–®–ò–• –§–£–ù–ö–¶–ò–ô ---

# --- –û—Å–Ω–æ–≤–Ω–æ–π UI ---
st.title("üìÑ –ê–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ DOCX") # –£–ø—Ä–æ—Å—Ç–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

with st.sidebar:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º")
    
    # NEW_FEATURE_START: –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –ø—Ä–∏–º–µ—Ä–æ–º"
    if not st.session_state.doc_loaded_flag: # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω (–Ω–∏ –ø—Ä–∏–º–µ—Ä, –Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π)
        if st.button("üöÄ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å –ø—Ä–∏–º–µ—Ä–æ–º", use_container_width=True, key="load_example_sidebar_btn"):
            init_session_state(clear_all=True, load_example_on_first_ever_run=True) # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–∏–º–µ—Ä–æ–º
            st.rerun()
    # NEW_FEATURE_END

    uploaded_file_widget = st.file_uploader( # –î–∞–µ–º —è–≤–Ω–æ–µ –∏–º—è –≤–∏–¥–∂–µ—Ç—É
        "–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π .docx —Ñ–∞–π–ª:", 
        type=["docx"], 
        key="user_doc_uploader_main", # –ò–∑–º–µ–Ω–∏–ª –∫–ª—é—á, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        disabled=st.session_state.processing
    )
    
    # NEW_FEATURE_START: –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ñ–∞–π–ª–∞
    if uploaded_file_widget and \
       (uploaded_file_widget.name != st.session_state.original_file_name or not st.session_state.doc_loaded_flag): # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –∏–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ
        init_session_state(clear_all=True) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ, –≤–∫–ª—é—á–∞—è —Ñ–ª–∞–≥–∏ –ø—Ä–∏–º–µ—Ä–∞
        st.session_state.current_doc_bytes = uploaded_file_widget.getvalue()
        st.session_state.original_file_name = uploaded_file_widget.name
        st.session_state.doc_loaded_flag = True
        st.session_state.is_example_active = False # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–∏–º–µ—Ä
        st.session_state.user_made_first_query_on_current_doc = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        st.session_state.chat_messages = [ # –ß–∏—Å—Ç–∏–º —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            {"role": "assistant", "content": f"–§–∞–π–ª **'{uploaded_file_widget.name}'** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –≤–∞—à–∏–º –∫–æ–º–∞–Ω–¥–∞–º!"}
        ]
        st.toast(f"–§–∞–π–ª '{uploaded_file_widget.name}' –∑–∞–≥—Ä—É–∂–µ–Ω.", icon="üëç")
        st.rerun() # –í–∞–∂–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    # NEW_FEATURE_END

    if st.session_state.doc_loaded_flag: # –ï—Å–ª–∏ –∫–∞–∫–æ–π-–ª–∏–±–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
        st.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: **{st.session_state.original_file_name}**")
        if st.session_state.is_example_active:
            st.caption("–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç.")

        # NEW_FEATURE_START: –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é "–æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏" –∏–ª–∏ –∫ –ø—Ä–∏–º–µ—Ä—É
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π / –°–±—Ä–æ—Å–∏—Ç—å", use_container_width=True, key="reset_sidebar_main_btn",
                      disabled=st.session_state.processing):
            init_session_state(clear_all=True, load_example_on_first_ever_run=True) # –ü—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–Ω–æ–≤–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–º–µ—Ä
            st.rerun()
        # NEW_FEATURE_END
        
        if st.session_state.current_doc_bytes:
            download_file_name = f"{'example_modified' if st.session_state.is_example_active else 'modified'}_{st.session_state.original_file_name or 'document.docx'}"
            st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç", st.session_state.current_doc_bytes,
                download_file_name, "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                use_container_width=True, disabled=st.session_state.processing, key="final_download_main_btn"
            )
    else: 
        st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π .docx –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º.")

    st.divider()
    st.caption("**Proof of Concept (v0.1)**") # –ò—Å–ø–æ–ª—å–∑—É–µ–º st.caption –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    st.caption("""
    –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é. –ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è.
    """)
    st.caption("""
    –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.
    """)


if not st.session_state.doc_loaded_flag: # –ï—Å–ª–∏ –Ω–∏–∫–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ **–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º** –Ω–∞ –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
elif not st.session_state.app_graph:
    st.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ (LangGraph). –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
else:
    # NEW_FEATURE_START: –£—Å–ª–æ–≤–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω –ù–ï –ø—Ä–∏–º–µ—Ä –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≠–¢–û–ú–£ –¥–æ–∫—É–º–µ–Ω—Ç—É
    if not st.session_state.user_made_first_query_on_current_doc and not st.session_state.is_example_active:
        with st.container(border=True):
             st.subheader("üí° –ö–∞–∫ –Ω–∞—á–∞—Ç—å:")
             st.markdown("""
             1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à `.docx` –¥–æ–∫—É–º–µ–Ω—Ç **–∑–∞–≥—Ä—É–∂–µ–Ω**.
             2. **–û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏** –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∂–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ó–∞–º–µ–Ω–∏ '–°—Ç–∞—Ä—ã–π –¢–µ–∫—Å—Ç' –Ω–∞ '–ù–æ–≤—ã–π –¢–µ–∫—Å—Ç' –≤ –ø–µ—Ä–≤–æ–º –∞–±–∑–∞—Ü–µ").
             3. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ** –∏—Ö –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.
             4. **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ** –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∫–∏.
             5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏, **—Å–∫–∞—á–∞–π—Ç–µ** –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ **–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏**.
             """)
        st.markdown("---")
    # NEW_FEATURE_END

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Ç–∞
    for msg in st.session_state.chat_messages: # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        with st.chat_message(msg["role"]):
            if isinstance(msg["content"], list):
                for item_md in msg["content"]:
                    st.markdown(item_md)
            else:
                st.markdown(msg["content"])

    if st.session_state.show_confirmation and st.session_state.proposed_instructions:
        show_confirmation_ui(st.session_state.proposed_instructions)
    
    chat_input_disabled_reason = None
    if st.session_state.processing: chat_input_disabled_reason = "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞..."
    elif st.session_state.show_confirmation: chat_input_disabled_reason = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π..."
    
    prompt_for_chat_input = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:" if st.session_state.awaiting_clarification else "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ?"
    
    if user_input_str := st.chat_input(prompt_for_chat_input, disabled=bool(chat_input_disabled_reason), key="main_chat_input_field_key"): # –ò–∑–º–µ–Ω–∏–ª –∫–ª—é—á
        if not st.session_state.user_made_first_query_on_current_doc: 
            st.session_state.user_made_first_query_on_current_doc = True # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¢–ï–ö–£–©–ï–ì–û –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å–¥–µ–ª–∞–Ω
        handle_user_prompt(user_input_str)

    if chat_input_disabled_reason:
        st.caption(f"_{chat_input_disabled_reason}_")