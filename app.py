import streamlit as st
from docx import Document
from io import BytesIO
import os

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä–∞—Ñ–æ–º –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
try:
    from core.llm_handler import build_graph, GraphState # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ GraphState —Ç–æ–∂–µ —Ç–∞–º
    # –ï—Å–ª–∏ llm_graph_builder —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ –ª–æ–≥–∏–∫–∏ LLM, —Ç–æ llm_handler –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ 'core/llm_handler.py': {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    st.stop()

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DOCX
try:
    # extract_text_from_doc –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ docx_modifier –∏–ª–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º utils
    from core.docx_modifier import extract_text_from_doc 
    # modify_document_with_structured_instructions –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ —É–∑–ª–∞ –≥—Ä–∞—Ñ–∞,
    # –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø—Ä—è–º—É—é –∏–∑ app.py –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–µ–Ω, –µ—Å–ª–∏ –≥—Ä–∞—Ñ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
    # –ù–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –∏—Ö –ø–∞—Ä—Å–∏—Ç—å, –µ—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user-friendly –æ–ø–∏—Å–∞–Ω–∏–µ.
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 'core/docx_modifier.py': {e}.")
    st.stop()


# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ê–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ DOCX (LangGraph)",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ (–æ–¥–∏–Ω —Ä–∞–∑) ---
if "app_graph" not in st.session_state:
    try:
        st.session_state.app_graph = build_graph()
        st.info("–ì—Ä–∞—Ñ LangGraph —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LangGraph: {e}")
        st.session_state.app_graph = None # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –≥—Ä–∞—Ñ –Ω–µ –≥–æ—Ç–æ–≤
        # –ú–æ–∂–Ω–æ st.stop() –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞ –±–µ–∑ –≥—Ä–∞—Ñ–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ Streamlit ---
default_sl_session_state = {
    "chat_messages": [], 
    "current_doc_bytes": None,
    "original_file_name": None,
    "doc_uploaded": False,
    "processing_graph": False, 
    "first_query_made": False,
    "show_confirmation_modal": False, 
    "graph_proposed_instructions": None, 
    "awaiting_clarification_response": False,
    "user_confirmation": None  # <--- –î–û–ë–ê–í–õ–ï–ù –≠–¢–û–¢ –ö–õ–Æ–ß
}
for key, value in default_sl_session_state.items():
    if key not in st.session_state:
        st.session_state[key] = value

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ app.py) ...


# --- –§—É–Ω–∫—Ü–∏–∏ UI –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
def display_chat_messages_sl():
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –∏–∑ st.session_state.chat_messages."""
    for message in st.session_state.chat_messages:
        with st.chat_message(message["role"]):
            # –ï—Å–ª–∏ content - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∞–≤–æ–∫), –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if isinstance(message["content"], list):
                for item in message["content"]:
                    st.markdown(item)
            else:
                st.markdown(message["content"])

def format_instruction_for_display(instruction: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    op_type = instruction.get("operation_type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è")
    params = instruction.get("parameters", {})
    target = instruction.get("target_description", {})
    
    display_str = f"**–î–µ–π—Å—Ç–≤–∏–µ:** {op_type}\n"
    
    if op_type == "REPLACE_TEXT":
        old = params.get('old_text', 'N/A')
        new = params.get('new_text', 'N/A')
        context = target.get('text_to_find')
        display_str += f"- –ó–∞–º–µ–Ω–∏—Ç—å: `{old}`\n- –ù–∞: `{new}`"
        if context: display_str += f"\n- –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: `{context}`"
    elif op_type == "INSERT_TEXT":
        text_ins = params.get('text_to_insert', 'N/A')
        pos = params.get('position', 'N/A')
        context = target.get('text_to_find')
        display_str += f"- –í—Å—Ç–∞–≤–∏—Ç—å: `{text_ins}`\n- –ü–æ–∑–∏—Ü–∏—è: `{pos}`\n- –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ: `{context}`"
    elif op_type == "DELETE_ELEMENT":
        el_type = target.get('element_type', 'N/A')
        context = target.get('text_to_find')
        display_str += f"- –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞: `{el_type}`\n- –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ç–µ–∫—Å—Ç—É: `{context}`"
    elif op_type == "APPLY_FORMATTING":
        rules_display = [f"  - `{r.get('style')}`: `{r.get('value')}`" for r in params.get("formatting_rules", [])]
        context = target.get('text_to_find')
        segment = params.get('apply_to_text_segment')
        display_str += f"- –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫: `{segment or context}`"
        if rules_display: display_str += "\n" + "\n".join(rules_display)
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö operation_type
    else:
        display_str += f"- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ```json\n{json.dumps(params, indent=2, ensure_ascii=False)}\n```"
        display_str += f"- –¶–µ–ª—å: ```json\n{json.dumps(target, indent=2, ensure_ascii=False)}\n```"
    return display_str


def show_graph_proposed_changes_modal(instructions: list[dict]):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –æ—Ç –≥—Ä–∞—Ñ–∞."""
    if not instructions: # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–æ –≤—ã–∑–æ–≤–∞, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        st.session_state.show_confirmation_modal = False
        return

    with st.container(border=True):
        st.subheader("ü§ñ –ì—Ä–∞—Ñ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        for i, instruction in enumerate(instructions):
            st.markdown(f"**–ü—Ä–∞–≤–∫–∞ {i+1}:**")
            st.markdown(format_instruction_for_display(instruction))
            st.markdown("---")

        col1, col2, col_spacer = st.columns([1,1,4])
        with col1:
            if st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", key="apply_graph_changes_btn", use_container_width=True):
                st.session_state.user_confirmation = "apply"
                st.session_state.show_confirmation_modal = False # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
                st.rerun()
        with col2:
            if st.button("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key="cancel_graph_changes_btn", use_container_width=True):
                st.session_state.user_confirmation = "cancel"
                st.session_state.show_confirmation_modal = False # –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
                st.rerun()

# --- –û—Å–Ω–æ–≤–Ω–æ–π UI ---
st.title("üìÑ –ê–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ DOCX (–Ω–∞ –±–∞–∑–µ LangGraph)")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ---
with st.sidebar:
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ .docx —Ñ–∞–π–ª", type=["docx"], key="file_uploader_sidebar",
        disabled=st.session_state.processing_graph
    )

    if uploaded_file and not st.session_state.doc_uploaded:
        st.session_state.current_doc_bytes = uploaded_file.getvalue()
        st.session_state.original_file_name = uploaded_file.name
        st.session_state.doc_uploaded = True
        st.session_state.chat_messages = [] # –û—á–∏—â–∞–µ–º —á–∞—Ç
        st.session_state.first_query_made = False
        st.session_state.show_confirmation_modal = False
        st.session_state.graph_proposed_instructions = None
        st.session_state.awaiting_clarification_response = False
        st.success(f"–§–∞–π–ª '{uploaded_file.name}' –∑–∞–≥—Ä—É–∂–µ–Ω.")
        st.rerun()

    if st.session_state.doc_uploaded:
        st.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: **{st.session_state.original_file_name}**")
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", key="reset_doc_btn", use_container_width=True,
                      disabled=st.session_state.processing_graph):
            for key_to_reset in default_sl_session_state: # –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                 st.session_state[key_to_reset] = default_sl_session_state[key_to_reset]
            st.rerun()
        
        if st.session_state.current_doc_bytes:
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç", data=st.session_state.current_doc_bytes,
                file_name=f"modified_{st.session_state.original_file_name or 'document.docx'}",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                key="download_current_doc_btn", use_container_width=True,
                disabled=st.session_state.processing_graph
            )
    else:
        st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å ---
if not st.session_state.doc_uploaded:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.")
elif not st.session_state.app_graph: # –ï—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    st.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LangGraph. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
else:
    if not st.session_state.first_query_made:
        with st.container(border=True):
             st.subheader("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:")
             st.markdown("1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ `.docx`.\n2. –û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏.\n3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è.\n4. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.")
             st.markdown("---")

    display_chat_messages_sl()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –º–æ–¥–∞–ª –∞–∫—Ç–∏–≤–µ–Ω
    if st.session_state.show_confirmation_modal and st.session_state.graph_proposed_instructions:
        show_graph_proposed_changes_modal(st.session_state.graph_proposed_instructions)
        # –ë–ª–æ–∫–∏—Ä—É–µ–º chat_input, –ø–æ–∫–∞ –æ—Ç–∫—Ä—ã—Ç –º–æ–¥–∞–ª (–Ω–µ—è–≤–Ω–æ, —Ç.–∫. rerun –ø—Ä–µ—Ä–≤–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ chat_input)
        # –∏–ª–∏ –º–æ–∂–Ω–æ —è–≤–Ω–æ: chat_input_disabled = True

    chat_input_disabled_reason = None
    if st.session_state.processing_graph: chat_input_disabled_reason = "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞..."
    elif st.session_state.show_confirmation_modal: chat_input_disabled_reason = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π..."
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    prompt_text = "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?"
    if st.session_state.awaiting_clarification_response:
        prompt_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å:"

    user_input = st.chat_input(
        prompt_text,
        key="user_query_chat_input_langgraph",
        disabled=bool(chat_input_disabled_reason) # True –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏—á–∏–Ω–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    )

    if chat_input_disabled_reason:
        st.caption(f"_{chat_input_disabled_reason}_")

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª/–æ—Ç–∫–ª–æ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏—è
    if user_input and not chat_input_disabled_reason:
        st.session_state.processing_graph = True
        st.session_state.first_query_made = True
        st.session_state.chat_messages.append({"role": "user", "content": user_input})
        
        # –ì–æ—Ç–æ–≤–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≥—Ä–∞—Ñ–∞
        try:
            doc_content_text = ""
            if st.session_state.current_doc_bytes:
                doc_for_text = Document(BytesIO(st.session_state.current_doc_bytes))
                doc_content_text = extract_text_from_doc(doc_for_text)
            
            initial_graph_state = GraphState(
                original_user_query=user_input, # –∏–ª–∏ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è original
                current_user_query=user_input,
                document_content_text=doc_content_text,
                document_bytes=st.session_state.current_doc_bytes,
                extracted_instructions=None,
                clarification_question=None,
                system_message=None,
                next_node_to_call=None # –ì—Ä–∞—Ñ —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ —ç—Ç–æ –∫–∞–∫-—Ç–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –≥—Ä–∞—Ñ
            # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ current_user_query –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∞.
            # –ü–æ–∫–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ: –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–≤–æ–¥ - –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —Å —Ç–µ–∫—É—â–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.
            if st.session_state.awaiting_clarification_response:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å/–∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ initial_graph_state
                # initial_graph_state["previous_context"] = ...
                st.session_state.awaiting_clarification_response = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
            with st.spinner("ü§ñ –ê–≥–µ–Ω—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                final_graph_state = st.session_state.app_graph.invoke(
                    initial_graph_state, 
                    {"recursion_limit": 15} # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç, –µ—Å–ª–∏ –≥—Ä–∞—Ñ —Å–ª–æ–∂–Ω—ã–π
                )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥—Ä–∞—Ñ–∞
            st.session_state.current_doc_bytes = final_graph_state.get("document_bytes", st.session_state.current_doc_bytes)
            
            if final_graph_state.get("clarification_question"):
                st.session_state.awaiting_clarification_response = True
                st.session_state.chat_messages.append({
                    "role": "assistant",
                    "content": final_graph_state["clarification_question"]
                })
            elif final_graph_state.get("extracted_instructions"):
                # –ï—Å–ª–∏ –≥—Ä–∞—Ñ —Å–∞–º –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç, –∞ —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                st.session_state.graph_proposed_instructions = final_graph_state["extracted_instructions"]
                st.session_state.show_confirmation_modal = True # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–∫–∞—Ö –±—É–¥–µ—Ç –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
            elif final_graph_state.get("system_message"):
                st.session_state.chat_messages.append({
                    "role": "assistant",
                    "content": final_graph_state["system_message"]
                })
            else: # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                 st.session_state.chat_messages.append({
                    "role": "assistant",
                    "content": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ—è—Å–µ–Ω."
                })

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∞: {e}")
            st.session_state.chat_messages.append({"role": "assistant", "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"})
        finally:
            st.session_state.processing_graph = False
            st.rerun()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (–µ—Å–ª–∏ –≥—Ä–∞—Ñ –ù–ï –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏—Ö —Å–∞–º, –∞ –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)
    # –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –≥—Ä–∞—Ñ–∞ –∏–ª–∏ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ user_confirmation
    # –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –≥—Ä–∞—Ñ tool_execution_node –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
    # –ï—Å–ª–∏ –∂–µ tool_execution_node –±—ã–ª –±—ã –ø–æ—Å–ª–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, —Ç–æ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞.
    # –°–µ–π—á–∞—Å, –µ—Å–ª–∏ –≥—Ä–∞—Ñ –≤–µ—Ä–Ω—É–ª extracted_instructions, –º—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª.
    # –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª–µ, user_confirmation —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.
    # –ù–∞ —Å–ª–µ–¥—É—é—â–µ–º st.rerun() –º—ã –¥–æ–ª–∂–Ω—ã —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä–∞—Ñ, –Ω–æ —Å —Ñ–ª–∞–≥–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å.
    # –≠—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç. –ü—Ä–æ—â–µ, –µ—Å–ª–∏ –≥—Ä–∞—Ñ —Å–∞–º —Ä–µ—à–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç extracted_instructions, –∑–Ω–∞—á–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ).
    # –ò–õ–ò: –µ—Å–ª–∏ –≥—Ä–∞—Ñ –≤–µ—Ä–Ω—É–ª extracted_instructions, –æ–Ω –ù–ï –í–´–ü–û–õ–ù–Ø–ï–¢ –ò–•, –∞ –∂–¥–µ—Ç.
    # –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –º—ã –≤—ã–∑—ã–≤–∞–µ–º tool_execution_node –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü. –≤—Ö–æ–¥ –≤ –≥—Ä–∞—Ñ.

    # –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –≥—Ä–∞—Ñ –≤–µ—Ä–Ω—É–ª –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è):
    if st.session_state.user_confirmation and st.session_state.graph_proposed_instructions:
        action = st.session_state.user_confirmation
        instructions = st.session_state.graph_proposed_instructions
        
        st.session_state.user_confirmation = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        st.session_state.graph_proposed_instructions = None
        st.session_state.show_confirmation_modal = False
        st.session_state.processing_graph = True # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤–≤–æ–¥

        if action == "apply":
            st.session_state.chat_messages.append({
                "role": "assistant",
                "content": "–ü—Ä–∏–º–µ–Ω—è—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
            })
            # –ì–æ—Ç–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ —É–∑–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
            # –ï—Å–ª–∏ tool_execution_node –≤ –≥—Ä–∞—Ñ–µ, —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –≥—Ä–∞—Ñ
            # –∏ —É–∫–∞–∑–∞—Ç—å –µ–º—É, —á—Ç–æ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å tool_execution_node.
            # –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, –ø–µ—Ä–µ–¥–∞–≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ initial_graph_state["extracted_instructions"]
            # –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–≤ initial_graph_state["next_node_to_call"] = "tool_executor".
            
            try:
                graph_input_for_execution = GraphState(
                    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ relevant state items
                    original_user_query=st.session_state.chat_messages[-2]['content'] if len(st.session_state.chat_messages) > 1 and st.session_state.chat_messages[-2]['role'] == 'user' else "N/A",
                    current_user_query="[–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï_–î–ï–ô–°–¢–í–ò–ô]", # –°–∏–≥–Ω–∞–ª –¥–ª—è –≥—Ä–∞—Ñ–∞
                    document_content_text=extract_text_from_doc(Document(BytesIO(st.session_state.current_doc_bytes))) if st.session_state.current_doc_bytes else "",
                    document_bytes=st.session_state.current_doc_bytes,
                    extracted_instructions=instructions, # –ü–µ—Ä–µ–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    clarification_question=None,
                    system_message=None,
                    next_node_to_call="tool_executor" # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —É–∑–ª—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                )
                with st.spinner("‚öôÔ∏è –í—ã–ø–æ–ª–Ω—è—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è..."):
                    final_execution_state = st.session_state.app_graph.invoke(
                        graph_input_for_execution,
                        {"recursion_limit": 5} # –£–∑–µ–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∏–ª—å–Ω–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º
                    )
                
                st.session_state.current_doc_bytes = final_execution_state.get("document_bytes", st.session_state.current_doc_bytes)
                if final_execution_state.get("system_message"):
                    st.session_state.chat_messages.append({
                        "role": "assistant",
                        "content": final_execution_state["system_message"]
                    })
                else:
                    st.session_state.chat_messages.append({
                        "role": "assistant",
                        "content": "–î–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã." # –ó–∞–ø–∞—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    })

            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
                st.session_state.chat_messages.append({"role": "assistant", "content": f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}"})
            finally:
                st.session_state.processing_graph = False
                st.rerun()

        elif action == "cancel":
            st.session_state.chat_messages.append({
                "role": "assistant",
                "content": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã."
            })
            st.session_state.processing_graph = False # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ –±—ã–ª–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
            st.rerun()