import streamlit as st
from docx import Document
from io import BytesIO
import os
import difflib

from core.llm_handler import get_llm_instructions_list # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ llm_handler.py –≤ –ø–∞–ø–∫–µ core
from core.docx_modifier import modify_docx, extract_text_from_doc # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ docx_modifier.py –≤ –ø–∞–ø–∫–µ core

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ê–≥–µ–Ω—Ç –ø—Ä–∞–≤–æ–∫ DOCX",
    page_icon="üìÑ",
    layout="wide",
    initial_sidebar_state="expanded" # <--- –ò–ó–ú–ï–ù–ï–ù–û: –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
default_session_state_values = {
    "messages": [],
    "current_doc_bytes": None,
    "original_file_name": None,
    "doc_uploaded": False,
    "processing_active": False,
    "llm_proposed_instructions": None,
    "action_confirmed": None,
    "first_query_made": False # <--- –ù–û–í–´–ô –§–õ–ê–ì
}
for key, value in default_session_state_values.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- –§—É–Ω–∫—Ü–∏–∏ UI –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ---
def display_chat_messages():
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            if isinstance(message["content"], list):
                for item in message["content"]:
                    st.markdown(item)
            else:
                st.markdown(message["content"])

def show_proposed_changes_modal(instructions: list[dict]):
    if not instructions:
        st.warning("LLM –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –Ω–∏–∫–∞–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        st.session_state.llm_proposed_instructions = None
        st.session_state.action_confirmed = None
        st.rerun()
        return False

    with st.container(border=True):
        st.subheader("–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        diff_texts = []
        for i, instruction in enumerate(instructions):
            old = instruction['old_text']
            new = instruction['new_text']
            diff_texts.append(f"**–ü—Ä–∞–≤–∫–∞ {i+1}:**")
            diff_texts.append(f"```diff\n- {old}\n+ {new}\n```")
        st.markdown("\n\n".join(diff_texts))

        col1, col2, col_spacer = st.columns([1,1,4])
        with col1:
            apply_changes = st.button("‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è", key="apply_changes_btn_modal", use_container_width=True)
        with col2:
            cancel_changes = st.button("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", key="cancel_changes_btn_modal", use_container_width=True)

        if apply_changes:
            st.session_state.action_confirmed = "apply"
            st.rerun()
        if cancel_changes:
            st.session_state.action_confirmed = "cancel"
            st.rerun()
    return "pending"

# --- –û—Å–Ω–æ–≤–Ω–æ–π UI ---
st.title("üìÑ –ê–≥–µ–Ω—Ç –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –ø—Ä–∞–≤–æ–∫ –≤ .docx –¥–æ–∫—É–º–µ–Ω—Ç—ã")

# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ ---
with st.sidebar:
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ .docx —Ñ–∞–π–ª",
        type=["docx"],
        key="file_uploader_sidebar",
        disabled=st.session_state.processing_active
    )

    if uploaded_file is not None and not st.session_state.doc_uploaded:
        st.session_state.current_doc_bytes = uploaded_file.getvalue()
        st.session_state.original_file_name = uploaded_file.name
        st.session_state.doc_uploaded = True
        st.session_state.messages = []
        st.session_state.llm_proposed_instructions = None
        st.session_state.action_confirmed = None
        st.session_state.first_query_made = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        st.success(f"–§–∞–π–ª '{uploaded_file.name}' –∑–∞–≥—Ä—É–∂–µ–Ω.")
        st.rerun()

    if st.session_state.doc_uploaded:
        st.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: **{st.session_state.original_file_name}**")
        if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª", key="reset_doc_btn", disabled=st.session_state.processing_active, use_container_width=True):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            for key in default_session_state_values:
                st.session_state[key] = default_session_state_values[key]
            st.rerun()
        
        if st.session_state.current_doc_bytes:
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—É—â–∏–π –¥–æ–∫—É–º–µ–Ω—Ç",
                data=st.session_state.current_doc_bytes,
                file_name=f"modified_{st.session_state.original_file_name}" if st.session_state.original_file_name else "modified_document.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                key="download_current_doc_btn",
                disabled=st.session_state.processing_active,
                use_container_width=True
            )
    else: # –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Å–∞–π–¥–±–∞—Ä–µ
        st.caption("–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É.")


# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (—á–∞—Ç –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) ---
if not st.session_state.doc_uploaded:
    st.info("üëà –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
else:
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –ò–õ–ò –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω
    if not st.session_state.first_query_made: # <--- –ù–û–í–û–ï –£–°–õ–û–í–ò–ï –î–õ–Ø –ü–û–î–°–ö–ê–ó–ö–ò
        with st.container(border=True):
             st.subheader("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:")
             st.markdown("""
             1.  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à `.docx` –¥–æ–∫—É–º–µ–Ω—Ç **–∑–∞–≥—Ä—É–∂–µ–Ω** (—Å–º. –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å).
             2.  **–û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏** –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∏–∂–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞ —Ä–∞–∑).
             3.  –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è. **–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ** –∏—Ö.
             4.  **–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ** –ø—Ä–∞–≤–∫–∏.
             5.  –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ **—Å–∫–∞—á–∞–π—Ç–µ** –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏–ª–∏ **–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –≤–Ω–æ—Å–∏—Ç—å –ø—Ä–∞–≤–∫–∏**.
             """)
             st.markdown("---")


    display_chat_messages()

    chat_input_disabled = st.session_state.processing_active or \
                          bool(st.session_state.get('llm_proposed_instructions'))
    
    user_query = st.chat_input(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ò–∑–º–µ–Ω–∏ —Ü–µ–Ω—É –Ω–∞ 100 —Ä—É–± –∏ –¥–∞—Ç—É –Ω–∞ 01.01.2025')",
        key="user_query_chat_input",
        disabled=chat_input_disabled 
    )

    if user_query and not st.session_state.processing_active:
        if not st.session_state.llm_proposed_instructions:
            st.session_state.processing_active = True
            st.session_state.first_query_made = True # <--- –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì
            st.session_state.messages.append({"role": "user", "content": user_query})
            st.rerun()

    # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ user_query, LLM, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    if st.session_state.processing_active and st.session_state.messages and st.session_state.messages[-1]["role"] == "user":
        with st.chat_message("assistant"):
            with st.spinner("ü§ñ –î—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º..."):
                try:
                    doc_for_llm = Document(BytesIO(st.session_state.current_doc_bytes))
                    doc_content_text = extract_text_from_doc(doc_for_llm)
                    last_user_query = st.session_state.messages[-1]["content"]
                    llm_instructions = get_llm_instructions_list(doc_content_text, last_user_query)
                    
                    if llm_instructions:
                        st.session_state.llm_proposed_instructions = llm_instructions
                    else:
                        st.warning("LLM –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."
                        })
                        st.session_state.llm_proposed_instructions = None
                except Exception as e:
                    st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM: {e}")
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                    })
                    st.session_state.llm_proposed_instructions = None
                finally:
                    st.session_state.processing_active = False
                    st.rerun()

    if st.session_state.llm_proposed_instructions and \
       (st.session_state.action_confirmed is None): # –£–ø—Ä–æ—Å—Ç–∏–ª —É—Å–ª–æ–≤–∏–µ
        if st.session_state.action_confirmed is None:
             show_proposed_changes_modal(st.session_state.llm_proposed_instructions)
        
    elif st.session_state.action_confirmed == "apply":
        st.session_state.processing_active = True
        with st.chat_message("assistant"):
            with st.spinner("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è—é –∏–∑–º–µ–Ω–µ–Ω–∏—è..."):
                try:
                    instructions_to_apply = st.session_state.llm_proposed_instructions
                    doc_to_modify = Document(BytesIO(st.session_state.current_doc_bytes))
                    any_modification_successful = False
                    applied_changes_summary = ["**–ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**"]

                    for i, instruction in enumerate(instructions_to_apply):
                        old_text = instruction["old_text"]
                        new_text = instruction["new_text"]
                        success_this_edit = modify_docx(doc_to_modify, old_text, new_text)
                        if success_this_edit:
                            any_modification_successful = True
                            applied_changes_summary.append(f"  - –ó–∞–º–µ–Ω–µ–Ω–æ ¬´{old_text}¬ª –Ω–∞ ¬´{new_text}¬ª")
                        else:
                            applied_changes_summary.append(f"  - ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å ¬´{old_text}¬ª (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)")

                    if any_modification_successful:
                        bio = BytesIO()
                        doc_to_modify.save(bio)
                        st.session_state.current_doc_bytes = bio.getvalue()
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": applied_changes_summary
                        })
                    else:
                        # st.warning("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ (—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω).") # –≠—Ç–æ —É–∂–µ –≤ summary
                        st.session_state.messages.append({
                            "role": "assistant",
                            "content": applied_changes_summary if len(applied_changes_summary) > 1 else "–ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫ –Ω–µ —Å–º–æ–≥–ª–∞ –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω."
                        })
                except Exception as e:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}")
                    st.session_state.messages.append({
                        "role": "assistant",
                        "content": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {e}"
                    })
                finally:
                    st.session_state.processing_active = False
                    st.session_state.llm_proposed_instructions = None
                    st.session_state.action_confirmed = None
                    st.rerun()
    
    elif st.session_state.action_confirmed == "cancel":
        st.session_state.messages.append({
            "role": "assistant",
            "content": "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
        })
        st.session_state.llm_proposed_instructions = None
        st.session_state.action_confirmed = None
        st.rerun()

# –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Ç–µ–ø–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É—Å–ª–æ–≤–Ω–æ –≤—ã—à–µ
# st.markdown("---")
# st.subheader("üí° –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:")
# st.markdown("""...""")